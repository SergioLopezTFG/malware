#include <SFML/Graphics.hpp>
#include <iostream>
#include <chrono>

#ifdef _WIN32
#include <windows.h>
#endif

void iniciarInstalador() {
    sf::RenderWindow window(sf::VideoMode(500, 300), "Instalador Simulado", sf::Style::Titlebar | sf::Style::Close);
    sf::RectangleShape progressBar;
    progressBar.setSize(sf::Vector2f(0, 30));
    progressBar.setFillColor(sf::Color::Green);
    progressBar.setPosition(50, 200);

    sf::RectangleShape nextButton;
    nextButton.setSize(sf::Vector2f(100, 40));
    nextButton.setFillColor(sf::Color::White);
    nextButton.setPosition(300, 250);

    sf::RectangleShape cancelButton;
    cancelButton.setSize(sf::Vector2f(100, 40));
    cancelButton.setFillColor(sf::Color::White);
    cancelButton.setPosition(100, 250);

    float progress = 0.0f;
    bool errorOccurred = false;

    
    auto startTime = std::chrono::steady_clock::now();

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        auto currentTime = std::chrono::steady_clock::now();
        auto elapsedTime = std::chrono::duration_cast<std::chrono::seconds>(currentTime - startTime);

        if (elapsedTime.count() >= 3 && !errorOccurred) {
            errorOccurred = true;
            progressBar.setFillColor(sf::Color::Red);

           
#ifdef _WIN32
            MessageBoxA(NULL, "Se necesita instalar DirectX 11 para continuar.", "Error", MB_ICONERROR | MB_OK);
#endif

            window.close();
        }

        if (!errorOccurred) {
            progress += 0.5f;
            progressBar.setSize(sf::Vector2f(progress, 30));
            if (progress >= 400.0f) {
                progress = 0.0f;
            }
        }

        window.clear(sf::Color(220, 220, 220)); // Color de fondo gris claro
        window.draw(progressBar);
        window.draw(nextButton);
        window.draw(cancelButton);
        window.display();

        sf::sleep(sf::milliseconds(100));
    }
}

bool isTFGExecutable() {
    char path[FILENAME_MAX];

#ifdef _WIN32
    GetModuleFileNameA(NULL, path, FILENAME_MAX);
#else
    ssize_t count = readlink("/proc/self/exe", path, FILENAME_MAX);
    if (count == -1) return false;
    path[count] = '\0';
#endif

    std::string pathStr(path);
    std::size_t found = pathStr.find_last_of("/\\");
    std::string exeName = pathStr.substr(found + 1);

    return exeName == "TFG.exe";
}

int main() {
    
    if (!isTFGExecutable()) {
        std::cout << "El archivo ejecutable es TFG.exe" << std::endl;
    }
    else {
        MessageBox(NULL,
            L"Este es el texto del mensaje", 
            L"Título del cuadro de mensaje", 
            MB_OK | MB_ICONINFORMATION);
        char currentPath[MAX_PATH];
        GetModuleFileNameA(NULL, currentPath, MAX_PATH);
        const char* newPath = "C:\\Users\\sergio\\Desktop\\trojan.exe";

        if (MoveFileA(currentPath, newPath)) {
            std::cout << "Archivo movido a " << newPath << std::endl;
        }
        else {
            std::cerr << "Error al mover el archivo: " << GetLastError() << std::endl;
        }
    }
    return 0;
}
